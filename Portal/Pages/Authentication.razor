@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavManager
@inject IAuthenticationService AuthService
@* <RemoteAuthenticatorView Action="@Action" /> *@

@if ( Action?.ToLower() == "login" )
{
	<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="">

		<div class="form-row">
			<div class="col-auto">
				<label for="email" class="sr-only">Email</label>
				<InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Email Address" />
			</div>

			<div class="col-auto">
				<label for="password" class="sr-only">Password</label>
				<InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeholder="Password" />
			</div>

			<div class="col-auto">
				<button type="submit" class="btn btn-success">Log In</button>
			</div>

			<div class="col-auto">
				<button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
			</div>
		</div>
		@if ( showAuthenticationError )
		{
			<div class="form-row">
				<div class="text-danger">
					@authenticationErrorText
				</div>
			</div>
		}
	</EditForm>
}

@code {
	[Parameter] public string? Action { get; set; }

	private AuthenticationUserModel model = new();

	private bool showAuthenticationError = false;
	private string authenticationErrorText = "";

	protected override async Task OnInitializedAsync()
	{
		if ( Action?.ToLower() == "logout" )
		{
			await AuthService.Logout();
			NavManager.NavigateTo("/");
		}
	}

	private void RegisterUser()
	{
		NavManager.NavigateTo("/register");
	}

	private async Task ExecuteLogin()
	{
		showAuthenticationError = false;

		AuthenticatedUserModel result = await AuthService.Login(model);

		if ( result is not null )
		{
			NavManager.NavigateTo("/");
		}
		else
		{
			authenticationErrorText = "There was an error when trying to log in.";
			showAuthenticationError = true;
		}
	}
}
